#libraries
import turtle
import random
import time
import math
from turtle import *

#borders for later use
RIGHT_EDGE= 400
LEFT_EDGE= -400
BOTTOM_EDGE= -400
TOP_EDGE= 400

rickgrimes="THERickGrimessmaller.gif"
kimjongun="kimjongun.gif"

#setting screensize and color
screen=Screen()
screen.title=("game window")
screen.bgcolor("black")
turtle.screensize(canvwidth=395,canvheight=395,bg=None) #slightly smaller than the borders so enemies can spawn offscreen
screen.tracer(0) #updates more frequently
screen.addshape(rickgrimes)
screen.addshape(kimjongun)

    
#setting up the initial player character
player=Turtle()
player.clear()
player.penup()
player.shape(rickgrimes) #arrow will easily show direction facing
#player.color("white") #easy to see against a black background
#player.shapesize(0.1,0.1,0.1) #sets the size of the player

player.setx(0) #starts in the middle
player.sety(0)

player.setheading(90) #starts facing upward

dude = Turtle()

playerlives = [3]

global score
score=0
##########################################################
rounds = 1
playerspeed=10 #defining how far the player will move on each keypress

#each of the following functions corresponds to a keypress
def moveright():
    currx=player.xcor() #takes the current position
    player.setx(currx+playerspeed) #moves it a certain amount of units in the chosen direction
    player.setheading(0) #makes the charater face the direction of the keypress

def moveleft():
    currx=player.xcor()
    player.setx(currx-playerspeed)
    player.setheading(180)

def moveup():
    curry=player.ycor()
    player.sety(curry+playerspeed)
    player.setheading(90)

def movedown():
    curry=player.ycor()
    player.sety(curry-playerspeed)
    player.setheading(270)

teleportlist=[0,0,0] #number of teleports the player starts with
def teleport():
    if len(teleportlist)>=1:
        player.sety(random.randint(-250,250))
        player.setx(random.randint(-250,250))
        teleportlist.pop(len(teleportlist)-1)
    else:
        pass

#defining the onkey presses
turtle.onkey(moveright,"d")
turtle.onkey(moveleft,"a")
turtle.onkey(moveup,"w")
turtle.onkey(movedown,"s")
turtle.onkey(teleport,"t")

##########################################################
def gameover():
    global dude
    if (playerlives[0]) == 0:
        turtle.clearscreen()
        screen.bgcolor("black")
        dude.penup()
        dude.shapesize(20,20,20)
        dude.goto (0,0)
        dude.pendown ()
        dude.penup ()
        dude.hideturtle ()
        dude = turtle.Turtle ()
        dude.penup ()
        dude.pendown()
        dude.color("red")
        style = ('Verdana', 100, 'italic')
        dude.write ('Game over' , font = style, align = 'center')
        dude.hideturtle ()
        time.sleep(5)
        exit()
##########################################################
        
scoreboard2=[Turtle()]
def updatescoreboard():
    scoreboard2[0].clear()
    global score
    scoreboard=Turtle()
    scoreboard.penup()
    scoreboard.hideturtle()
    scoreboard.color("white")
    style=('Verdana',20,'italic')
    scoreboard.goto(-320,300)
    scoreboard.write("Score: ", font=style,align='left')
    scoreboard2[0].penup()
    scoreboard2[0].hideturtle()
    scoreboard2[0].color("white")
    scoreboard2[0].goto(-250,300)
    scoreboard2[0].write(score, font=style,align='left')

##########################################################

global xcor
xcor=-340
lifeturtles=[]
def showlives():
    global xcor
    for life in range(0,3):
        lifeturtles.append(Turtle())
        lifeturtles[life].penup()
        xcor=xcor+30
        lifeturtles[life].goto(xcor,290)
        lifeturtles[life].color("red")
        lifeturtles[life].shapesize(0.5,0.5,0.5)
        lifeturtles[life].shape("triangle")
        
        
##########################################################
##global score
##score = 0
##def scoreboard():
##    if abs(bulletlist[bullet-1].xcor()-currx)<=10 and abs(bulletlist[bullet-1].ycor()-curry)<=10:
##        score += 100
    

projectilespeed=8 #setting bullet speed
bulletlist=[] #making a list to move multiple objects at once

def genbullet(): #function for projectile generation
    bulletlist.append(Turtle()) #adds each new item as a turtle to the list
    bulletlist[len(bulletlist)-1].penup() #no trail
    bulletlist[len(bulletlist)-1].shape("circle") #matches color of the player
    bulletlist[len(bulletlist)-1].color("white")
    bulletlist[len(bulletlist)-1].shapesize(0.5,0.5,0.5) #smaller size
    bulletheading=player.heading() #matches position and heading to the player
    bulletx=player.xcor()
    bullety=player.ycor()
    bulletlist[len(bulletlist)-1].setx(bulletx) #moves to match direction player is facing, twice as fast
    bulletlist[len(bulletlist)-1].sety(bullety)
    bulletlist[len(bulletlist)-1].setheading(bulletheading)

#mapped to space
turtle.onkey(genbullet,"space")

##########################################################

global enemyspeed
enemyspeed = .5
global numenemies
numenemies=1
enemylist=[]
def randy(): #these generate random numbers for spawn coordinates
    randy=random.randint(-300,300) #cannot spawn within 100 units of the player
    if randy>=-100 and randy<=100:
        randy=randy+100
    else:
        pass
    return(randy)
def randx():
    randx=random.randint(-300,300)
    if randx>=-100 and randx<=100:
        randx=randx+100
    else:
        pass
    return(randx)
yspawn=300
xspawn=300
def genenemy(numenemies): #generates a set number of enemies based on how many are in the previous loop
    for enemy in range (0,numenemies): #the number of enemies can be easily changed
        enemylist.append(Turtle())
    for enemy in range (0,len(enemylist)):
        enemyx=player.xcor()
        enemyy=player.ycor()
        randyspawn=randy()
        randxspawn=randx()
        enemylist[enemy].penup() #no trail
        enemylist[enemy].shape(kimjongun) #different shape and color than player
        #enemylist[enemy].color("red")
        #enemylist[enemy].shapesize(1,1,1) #smaller size
        enemylist[enemy].setx(randyspawn) #random spawn(s)
        enemylist[enemy].sety(randxspawn)

##########################################################

genenemy(numenemies)
a=0
showlives()
global currlife
currlife=2
while True: #goes forever
    a=a+1
    turtle.listen() #waits for keypresses
    screen.update() #updates the screen every loop
    for bullet in range(0,len(bulletlist)): #moves every projectile every loop
        bulletlist[bullet].forward(projectilespeed)
    for enemy in range(0,len(enemylist)):
        if abs(enemylist[enemy-1].xcor()-player.xcor())<=15 and abs(enemylist[enemy-1].ycor()-player.ycor())<=15:
            playerlives[0] = playerlives[0]-1
            lifeturtles[currlife].hideturtle()
            currlife=currlife-1
            player.sety(0)
            player.setx(0)
            gameover()
##            player.hideturtle()
##            playerlist.clear()
##            break
        else:
            pass
        currx=enemylist[enemy-1].xcor() #this whole next section just gets the heading in degrees for the enemies to accurately track the player
        curry=enemylist[enemy-1].ycor()
        enemyx=player.xcor()
        enemyy=player.ycor()
        if enemyx==0:
            enemyx=enemyx+0.5 #cant divide by zero, so this prevents it from being so
        else:
            pass
        if enemyy==0:
            enemyy=enemyy+1
        else:
            pass
        yval=enemyy-curry #finding slope
        xval=enemyx-currx
        if xval==0:
            xval=xval+0.01
        else:
            pass
        slope=yval/xval
        conversion=180/3.141592 #need heading in degrees just to keep everything neat
        enemyheading=math.tan(slope)*conversion+180 #taking the tangent, converting it, and changing it to the opposite direction
        enemylist[enemy-1].setheading(enemyheading) #sets the heading for all the enemies
        enemylist[enemy-1].forward(enemyspeed) #slow for testing
        for bullet in range(0,len(bulletlist)):
            if abs(bulletlist[bullet-1].xcor()-currx)<=10 and abs(bulletlist[bullet-1].ycor()-curry)<=10:
                currx=enemylist[enemy-1].xcor()
                curry=enemylist[enemy-1].ycor()
                bulletlist[bullet-1].hideturtle()
                enemylist[enemy-1].hideturtle()
                del bulletlist[bullet-1]
                del enemylist[enemy-1]
                score=score+100
                updatescoreboard()
                print(score)
                continue
            else:
                continue
        if bool(enemylist)==False: #checks if the list of enemies is empty
            screen.update() #updates the screen
            teleportlist.append("0")
            for x in range(0,3):
                print()
                print("Loading next round",end="")
                for y in range(0,3):
                    print(".",end="")
                    time.sleep(.5)
            rounds += 1
            print()
            print("Round",rounds, "begin") #indicator of new round for testing
            numenemies=numenemies+1
            enemyspeed=enemyspeed+0.2
            genenemy(numenemies) #makes a new enemy or enemies
            #3 seconds in between rounds
            break
        else:
            continue
    if player.xcor()<=LEFT_EDGE: #if the player hits any of the borders they go to the opposite side
        player.setx(380)
    if player.xcor()>=RIGHT_EDGE:
        player.setx(-380)
    if player.ycor()>=TOP_EDGE:
        player.sety(-380)
    if player.ycor()<=BOTTOM_EDGE:
        player.sety(380)
    else:
        pass
    for enemy in range(0,len(enemylist)): #if any of the enemies hits any of the borders they go to the opposite side
        if enemylist[enemy].xcor()<=LEFT_EDGE:
            enemylist[enemy].setx(380)
        if enemylist[enemy].xcor()>=RIGHT_EDGE:
            enemylist[enemy].setx(-380)
        if enemylist[enemy].ycor()>=TOP_EDGE:
            enemylist[enemy].sety(-380)
        if enemylist[enemy].ycor()<=BOTTOM_EDGE:
            enemylist[enemy].sety(380)
        else:
            pass
gameover()
